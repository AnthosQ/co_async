set(ENABLE_MODULES ON)
if (ENABLE_MODULES)
    cmake_minimum_required(VERSION 3.28)
else()
    cmake_minimum_required(VERSION 3.18)
endif()

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

project(co_async LANGUAGES CXX)

include(cmake/clang_std_modules.cmake)
add_compile_options($<$<COMPILE_LANG_AND_ID:CXX,MSVC>:-utf-8>)

add_library(co_async OBJECT)
if (ENABLE_MODULES)
    enable_std_modules(co_async)
endif()
file(GLOB_RECURSE interface_sources co_async/*.cppm)
file(GLOB_RECURSE implementation_sources co_async/*.cpp)
if (ENABLE_MODULES)
    target_sources(co_async PUBLIC FILE_SET CXX_MODULES FILES ${interface_sources})
    target_include_directories(co_async PUBLIC .)
else()
    target_include_directories(co_async PUBLIC .)
endif()
target_sources(co_async PRIVATE ${implementation_sources})

if (CMAKE_SYSTEM_NAME MATCHES "Linux")
    target_sources(co_async PRIVATE liburing/liburing.cpp)
    target_include_directories(co_async PUBLIC liburing/include)
endif()

add_executable(main demo/main.cpp)
if (ENABLE_MODULES)
    enable_std_modules(main)
endif()
target_link_libraries(main PRIVATE co_async)
